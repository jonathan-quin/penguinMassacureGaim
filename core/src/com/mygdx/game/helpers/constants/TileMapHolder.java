package com.mygdx.game.helpers.constants;

import com.badlogic.gdx.graphics.Texture;
import com.mygdx.game.helpers.utilities.TileMapInfo;

import java.util.ArrayList;

public class TileMapHolder {

    /*
    public static TileMapInfo testInfo = new TileMapInfo(TextureHolder.iceTexture,30,20,16,
            new int[]{
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,
                0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,
                0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,0,1,9,0,0,
                0,0,0,1,0,0,0,0,9,2,2,0,0,0,2,2,9,9,9,9,9,9,0,0,0,0,1,1,0,0,
                0,0,0,1,1,1,1,0,0,9,2,0,0,0,2,9,9,0,0,0,0,9,0,0,0,0,1,1,0,0,
                0,0,0,1,1,1,1,0,0,2,9,9,2,2,9,0,0,0,0,0,0,9,0,0,0,0,1,1,0,0,
                0,0,0,0,0,0,1,1,0,0,0,0,9,9,0,0,0,0,0,0,0,9,0,0,0,0,1,1,0,0,
                0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,1,1,0,9,0,0,0,0,1,1,0,0,
                0,0,0,0,0,0,2,1,1,1,1,0,0,0,0,0,1,1,0,0,0,9,0,0,0,0,1,1,0,0,
                0,0,0,0,0,0,2,2,2,2,1,1,1,1,1,6,0,0,0,0,0,9,0,0,0,0,1,1,0,0,
                0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,1,1,1,0,0,0,9,0,0,0,1,1,1,1,0,
                0,0,0,0,0,0,0,9,2,2,2,9,9,9,9,9,9,9,9,9,9,0,0,0,0,1,1,1,1,0,
                0,0,0,0,0,0,0,9,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,9,1,1,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        );

    public static TileMapInfo sillyLevel = new TileMapInfo(new Texture("tilemapsAndSets/silly level.png"),30,20,32,
            new int[]{
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    1,2,2,34,33,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    17,18,18,18,18,18,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,9,10,33,2,2,2,2,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,17,18,18,18,26,10,10,10,10,10,10,25,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,9,10,10,10,10,10,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,17,18,26,10,10,10,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,17,18,18,18,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,3,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,18,18,18,18,18,18,18,18,19,0,0,
                    0,0,0,1,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,17,18,26,10,10,33,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,17,18,18,18,18,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                    1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,
                    17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19}
    );



     */

    public static TileMapInfo tempLobby = new TileMapInfo(new Texture("tilemapsAndSets/levels/tempLobby.png"),64,48,16,decompressList( new int[]{0, 201, 1, 43, 0, 21, 1, 43, 0, 21, 1, 43, 0, 21, 1, 3, 0, 37, 1, 3, 0, 21, 1, 3, 0, 37, 1, 3, 0, 21, 1, 3, 0, 37, 1, 3, 0, 21, 1, 3, 0, 37, 1, 3, 0, 21, 1, 3, 0, 37, 1, 3, 0, 20, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 12, 1, 12, 0, 11, 1, 5, 0, 19, 1, 5, 0, 12, 1, 12, 0, 11, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 5, 0, 35, 1, 5, 0, 19, 1, 45, 0, 19, 1, 45, 0, 19, 1, 45, 0, 19, 1, 45, 0, 523}));



    static int[] tempLevel1Collisions = new int[]{
            10,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,1,2,2,2,14,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,7,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,0,0,0,0,4,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,9,0,0,0,0,4,
            6,0,0,0,0,0,1,2,2,2,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,0,0,0,0,0,0,0,0,0,0,0,4,
            6,0,0,0,0,0,7,8,8,11,5,5,5,10,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,3,0,0,0,1,2,14,10,8,9,0,0,0,0,0,0,0,0,0,1,2,14,
            6,0,0,0,0,0,0,0,0,7,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,8,8,8,11,13,2,2,2,14,10,8,9,0,0,0,0,0,0,0,0,0,0,0,4,5,5,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,0,0,0,0,0,0,0,0,7,8,8,8,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,14,5,5,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,5,5,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,14,5,5,5,5,
            6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,14,13,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,5,5,5,5,5,
            6,0,0,0,0,0,0,0,0,1,2,2,2,2,2,14,5,5,5,5,5,5,5,5,5,5,5,13,2,2,2,2,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,14,5,5,5,5,5,5,
            6,0,0,1,2,2,2,2,2,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,5,5,5,5,5,5,5,5,
            13,2,2,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
    };
    public static TileMapInfo tempLevel1 = new TileMapInfo(new Texture("tilemapsAndSets/levels/tempLevel1.png"),64,48,16,
            tempLevel1Collisions);




    public static TileMapInfo tempLevel2 = new TileMapInfo(new Texture("tilemapsAndSets/levels/tempLevel2.png"),64,48,16,decompressList(new int[]{1, 65, 0, 62, 1, 2, 0, 62, 1, 2, 0, 62, 1, 2, 0, 62, 1, 2, 0, 41, 1, 2, 0, 19, 1, 2, 0, 1, 1, 2, 0, 36, 1, 4, 0, 19, 1, 2, 0, 1, 1, 10, 0, 15, 1, 9, 0, 2, 1, 6, 0, 19, 1, 2, 0, 1, 1, 11, 0, 14, 1, 9, 0, 2, 1, 4, 0, 21, 1, 2, 0, 1, 1, 4, 0, 4, 1, 3, 0, 17, 1, 3, 0, 30, 1, 2, 0, 62, 1, 2, 0, 62, 1, 2, 0, 17, 1, 3, 0, 42, 1, 2, 0, 17, 1, 3, 0, 2, 1, 3, 0, 37, 1, 2, 0, 18, 1, 2, 0, 1, 1, 4, 0, 37, 1, 2, 0, 18, 1, 6, 0, 11, 1, 8, 0, 19, 1, 2, 0, 18, 1, 5, 0, 12, 1, 8, 0, 19, 1, 2, 0, 3, 1, 6, 0, 32, 1, 5, 0, 2, 1, 4, 0, 10, 1, 2, 0, 3, 1, 9, 0, 29, 1, 5, 0, 2, 1, 4, 0, 10, 1, 2, 0, 7, 1, 7, 0, 48, 1, 2, 0, 10, 1, 4, 0, 48, 1, 2, 0, 62, 1, 2, 0, 62, 1, 2, 0, 62, 1, 2, 0, 25, 1, 4, 0, 33, 1, 2, 0, 25, 1, 9, 0, 28, 1, 2, 0, 27, 1, 9, 0, 26, 1, 2, 0, 32, 1, 4, 0, 8, 1, 2, 0, 16, 1, 2, 0, 17, 1, 3, 0, 12, 1, 4, 0, 8, 1, 5, 0, 1, 1, 4, 0, 6, 1, 4, 0, 16, 1, 4, 0, 24, 1, 11, 0, 5, 1, 4, 0, 10, 1, 3, 0, 1, 1, 5, 0, 28, 1, 8, 0, 5, 1, 4, 0, 8, 1, 5, 0, 1, 1, 4, 0, 33, 1, 2, 0, 7, 1, 4, 0, 8, 1, 4, 0, 47, 1, 5, 0, 59, 1, 5, 0, 36, 1, 5, 0, 17, 1, 6, 0, 35, 1, 8, 0, 15, 1, 6, 0, 35, 1, 3, 0, 1, 1, 4, 0, 15, 1, 6, 0, 2, 1, 3, 0, 52, 1, 14, 0, 49, 1, 17, 0, 36, 1, 29, 0, 31, 1, 470}));





    private static int[] decompressList(int[] input) {
        ArrayList<Integer> newArray = new ArrayList<>();

        for (int i = 1; i < input.length; i+=2){

            for (int n = 0; n < input[i]; n++){
                newArray.add(input[i-1]);
            }

        }

        int[] returnArr = new int[newArray.size()];

        for (int i = 0; i < returnArr.length; i++){
            returnArr[i] = newArray.get(i);
        }

        return  returnArr;

    }





}
